#!/bin/bash

# configuration for this tool
if [ ! -f "kleebuild.yml" ]; then
    touch kleebuild.yml
    echo -e "ccflags: -Wall\nname: Main" >kleebuild.yml
fi

function parse_yaml {
    local prefix=$2
    local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs
    fs=$(echo @ | tr @ '\034')
    sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\){$s:$s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
        awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
   }'
}

build_name=""
build_ccflags=""

# read cflags and name from configuration file
eval "$(parse_yaml kleebuild.yml build_)"

function kleebuild_init {
    # run configuration
    (
        if [ ! -d ".idea" ]; then
            mkdir .idea
        fi
        cd .idea || exit $?

        if [ ! -f "custcustomTargets.xml" ]; then
            touch customTargets.xml
            echo \
                "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<project version=\"4\">
  <component name=\"CLionExternalBuildManager\">
    <target id=\"45bfb92c-964a-4f2c-a80a-192ba015d85b\" name=\"KleeBuild\" defaultType=\"TOOL\">
      <configuration id=\"b520727f-72b6-4494-afe4-08c070a62eaf\" name=\"KleeBuild\" toolchainName=\"Default\">
        <build type=\"TOOL\">
          <tool actionId=\"Tool_External Tools_build\" />
        </build>
        <clean type=\"TOOL\">
          <tool actionId=\"Tool_External Tools_clean\" />
        </clean>
      </configuration>
    </target>
  </component>
</project>" >customTargets.xml
        fi

        if [ ! -d "runConfigurations" ]; then
            mkdir runConfigurations
        fi
        cd runConfigurations || exit $?
        xmls=($(find ./ -type f -name "*.xml"))
        if [ "${#xmls[@]}" == 0 ]; then
            touch "$build_name".xml
            project_dir=$(cd ../.. && pwd)
            echo \
                "<component name=\"ProjectRunConfigurationManager\">
    <configuration 
            default=\"false\" 
            name=\"$build_name\" 
            type=\"CLionExternalRunConfiguration\" 
            factoryName=\"Application\"
            PROGRAM_PARAMS=\"run\"
            REDIRECT_INPUT=\"false\" 
            ELEVATE=\"false\" 
            USE_EXTERNAL_CONSOLE=\"false\"
            WORKING_DIR=\"file://\$ProjectFileDir$\"
            PASS_PARENT_ENVS_2=\"true\" 
            PROJECT_NAME=\"${project_dir##*/}\" 
            TARGET_NAME=\"KleeBuild\" 
            CONFIG_NAME=\"KleeBuild\" 
            RUN_PATH=\"$(type -Pf kleebuild)\">
        <method v=\"2\">
            <option name=\"CLION.EXTERNAL.BUILD\" enabled=\"true\"/>
        </method>
    </configuration>
</component>" >"$build_name".xml
        fi
        cd ..

        if [ ! -d "tools" ]; then
            mkdir tools
        fi
        cd tools || exit $?
        if [ ! -f "External Tools.xml" ]; then
            touch "External Tools.xml"
            echo \
                "<toolSet name=\"External Tools\">
  <tool name=\"build\" description=\"builds the project in &quot;build&quot; directory\" showInMainMenu=\"false\" showInEditor=\"false\" showInProject=\"false\" showInSearchPopup=\"false\" disabled=\"false\" useConsole=\"true\" showConsoleOnStdOut=\"false\" showConsoleOnStdErr=\"false\" synchronizeAfterRun=\"true\">
    <exec>
      <option name=\"COMMAND\" value=\"kleebuild\" />
      <option name=\"PARAMETERS\" value=\"build\" />
      <option name=\"WORKING_DIRECTORY\" value=\"\$ProjectFileDir$\" />
    </exec>
  </tool>
  <tool name=\"clean\" description=\"cleans up your project\" showInMainMenu=\"false\" showInEditor=\"false\" showInProject=\"false\" showInSearchPopup=\"false\" disabled=\"false\" useConsole=\"true\" showConsoleOnStdOut=\"false\" showConsoleOnStdErr=\"false\" synchronizeAfterRun=\"true\">
    <exec>
      <option name=\"COMMAND\" value=\"kleebuild\" />
      <option name=\"PARAMETERS\" value=\"clean\" />
      <option name=\"WORKING_DIRECTORY\" value=\"\$ProjectFileDir$\" />
    </exec>
  </tool>
</toolSet>" >"External Tools.xml"
        fi
    )

    # configuration of CLion's stupid compile_commands.json
    # that has to exist because otherwise CLion won't understand
    # that I'm NOT using CMake
    if [ ! -f "compile_commands.json" ]; then
        touch compile_commands.json
        echo \
            "[{
    \"directory\": \"$(pwd)\",
    \"command\": \"gcc\",
    \"file\": \"src/main.c\"
}]" >compile_commands.json

    fi

    # standard project structure
    (
        if [ ! -d "src" ]; then
            mkdir src
        fi
        cd src || exit $?
        if [ ! -d "include" ]; then
            mkdir include
        fi
        if [ ! -f "main.c" ]; then
            touch main.c
        fi
    )
}

function kleebuild_build {

    kleebuild_init

    # create build directory if theren is no
    if [ ! -d "build/" ]; then
        mkdir build
    fi

    # check if config file was read successfully
    if [[ -z "${build_name}" ]] || [[ " " == "${build_ccflags}" ]]; then
        echo "Error reading kleebuild.yml"
        echo "Please delete lines where there is no value assigned to the key word :)"
        exit 1
    fi

    # change directory to src to start compiling
    if [ -d "src" ]; then
        cd src || exit $?
    fi

    # compile every source file on its own to an object file in build directory
    sources=(./*.c)
    for file in "${sources[@]}"; do
        local temp="../build/$file"
        gcc -c "$file" -o "${temp/".c"/".o"}" $build_ccflags || exit $?
    done

    # compile all those object files to one executable
    cd ../build || exit $?
    objects=(*.o)
    gcc -o "$build_name" "${objects[@]}" "$build_ccflags"
}

function kleebuild_clean {
    rm -rf build/*
}

function kleebuild_run {
    workingDir=$(pwd)
    nice -n 20 "$workingDir/build/$build_name"
}

if [ "$1" == "init" ]; then
    kleebuild_init
elif [ "$1" == "build" ]; then
    kleebuild_build
elif [ "$1" == "clean" ]; then
    echo "Cleaning..."
    kleebuild_clean
    echo "Clean finished."
elif [ "$1" == "run" ]; then
    kleebuild_run
else
    echo "\"$1\" is no valid command."
    exit 1
fi
exit $?
